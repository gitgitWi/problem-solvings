import { describe, it, expect } from 'vitest';

/**
 * 15. 3 Sum
 * - @see {@link https://leetcode.com/problems/3sum/}
 */

function threeSum(nums: number[]): number[][] {
  throw Error('Need Implement');

  return [];
}

describe('15. 3 Sum', () => {
  it('[-1, 0, 1, 2, -1, -4]', () => {
    expect(threeSum([-1, 0, 1, 2, -1, -4])).toEqual(
      expect.arrayContaining([
        [-1, -1, 2],
        [-1, 0, 1],
      ]),
    );
  });

  it('[0, 1, 1]', () => {
    expect(threeSum([0, 1, 1])).toEqual(expect.arrayContaining([]));
  });

  it('[0, 0, 0]', () => {
    expect(threeSum([0, 0, 0])).toEqual(expect.arrayContaining([[0, 0, 0]]));
  });

  it('timeout1', () => {
    expect(
      threeSum([
        13, -14, -10, -4, 4, 4, 0, -14, 5, -9, -3, -10, 14, 7, -3, -4, -3, 12,
        -14, 2, -11, -6, 0, -7, 13, -2, -7, -11, -14, -13, 5, 14, -12, 11, -13,
        -1, -8, 2, 0, 4, 1, 4, 10, -8, -11, -8, 3, 1, 11, 4, -12, 8, 5, -4, -14,
        -4, 9, -13, -8, 2, -11, 12, -7, 14, 0, -5, -2, 7, 5, 5, -3, 13, -6, -8,
        -10, -10, -9, 0, 6, -12, 11, 2, 11, 1, 13, 4, 12, -1, 6, -11, -14, 2, 9,
        -6, 1, -6, -4, 14, -13, 8, 4, -1, 6, 6, -2, 11, 11, 4, -4, -5, -1, -8,
        12, -13, 1, 10, 7, -10, -14, -10, -5, -13, 0, 11,
      ]),
    ).toEqual(
      expect.arrayContaining([
        [-10, 0, 10],
        [-13, 1, 12],
        [-8, 1, 7],
        [-10, -1, 11],
        [-1, 0, 1],
        [-5, -5, 10],
        [-8, -4, 12],
        [-14, 4, 10],
        [-5, 1, 4],
        [-4, 0, 4],
        [-5, -2, 7],
        [-10, -2, 12],
        [-8, -2, 10],
        [-13, 6, 7],
        [-5, -1, 6],
        [-10, 4, 6],
        [-4, -2, 6],
        [-8, 4, 4],
        [-8, 0, 8],
        [-14, 6, 8],
        [-14, 0, 14],
        [-13, -1, 14],
        [-10, -4, 14],
        [-4, -4, 8],
        [-6, -5, 11],
        [-6, -1, 7],
        [-6, -4, 10],
        [-6, 0, 6],
        [-6, -2, 8],
        [-8, -6, 14],
        [-2, 1, 1],
        [-6, -6, 12],
        [-10, 1, 9],
        [-8, -1, 9],
        [-5, -4, 9],
        [-13, 4, 9],
        [-13, 2, 11],
        [-14, 2, 12],
        [-2, 0, 2],
        [-8, 2, 6],
        [-1, -1, 2],
        [-10, 2, 8],
        [-6, 2, 4],
        [-11, 0, 11],
        [-11, 1, 10],
        [-11, -1, 12],
        [-11, 4, 7],
        [-11, 2, 9],
        [-13, 0, 13],
        [-14, 1, 13],
        [-8, -5, 13],
        [-11, -2, 13],
        [-4, 2, 2],
        [-12, 1, 11],
        [-12, 0, 12],
        [-12, 6, 6],
        [-12, 4, 8],
        [-12, -2, 14],
        [-12, 2, 10],
        [-12, -1, 13],
        [-9, -1, 10],
        [-9, -2, 11],
        [-9, 1, 8],
        [-9, -5, 14],
        [-9, 0, 9],
        [-9, 2, 7],
        [-9, -4, 13],
        [-8, -3, 11],
        [-4, -3, 7],
        [-3, -1, 4],
        [-5, -3, 8],
        [-6, -3, 9],
        [-3, 1, 2],
        [-11, -3, 14],
        [-10, -3, 13],
        [-9, -3, 12],
        [-5, 0, 5],
        [-4, -1, 5],
        [-13, 5, 8],
        [-6, 1, 5],
        [-14, 5, 9],
        [-11, 5, 6],
        [-12, 5, 7],
        [-9, 4, 5],
        [-3, -2, 5],
        [-10, 5, 5],
        [-14, 7, 7],
        [-2, -2, 4],
        [0, 0, 0],
        [-7, 0, 7],
        [-7, -5, 12],
        [-7, -4, 11],
        [-7, 1, 6],
        [-7, -1, 8],
        [-7, -2, 9],
        [-7, -6, 13],
        [-7, -3, 10],
        [-7, 2, 5],
        [-14, 3, 11],
        [-10, 3, 7],
        [-13, 3, 10],
        [-4, 1, 3],
        [-2, -1, 3],
        [-5, 2, 3],
        [-11, 3, 8],
        [-12, 3, 9],
        [-9, 3, 6],
        [-3, 0, 3],
        [-8, 3, 5],
        [-7, 3, 4],
        [-7, -7, 14],
        [-3, -3, 6],
      ]),
    );
  });

  it('timeout2', () => {
    expect(
      threeSum([
        -12, 12, -5, -4, -12, 11, 9, -11, 13, 1, 12, -1, 8, 1, -9, -11, -13, -4,
        10, -9, -6, -11, 1, -15, -3, 4, 0, -15, 3, 6, -4, 7, 3, -2, 10, -2, -6,
        4, 2, -7, 12, -1, 7, 6, 7, 6, 2, 10, -13, -3, 8, -12, 2, -5, -12, 6, 6,
        -5, 6, -5, -14, 9, 9, -4, -8, 4, 2, -7, -15, -11, -7, 12, -4, 8, -5,
        -12, -1, 12, 5, 1, -5, -1, 5, 12, 9, 0, 3, 0, 3, -14, 2, -4, 2, -4, 0,
        1, 7, -13, 9, -1, 13, -12, -11, -6, 11, -1, -10, -5, -3, 10, 3, 7, -6,
        -15, -4, 10, 1, 14, -12,
      ]),
    ).toEqual(
      expect.arrayContaining([
        [-15, 1, 14],
        [-6, -4, 10],
        [-4, 1, 3],
        [-4, -3, 7],
        [-10, -4, 14],
        [-10, 3, 7],
        [-6, -1, 7],
        [-12, 1, 11],
        [-6, -5, 11],
        [-10, -1, 11],
        [-11, 1, 10],
        [-11, -3, 14],
        [-10, -3, 13],
        [-12, -1, 13],
        [-12, 3, 9],
        [-6, -3, 9],
        [-5, -4, 9],
        [-10, 1, 9],
        [-13, 3, 10],
        [-13, -1, 14],
        [-3, 0, 3],
        [-10, 0, 10],
        [-1, 0, 1],
        [-11, 0, 11],
        [-13, 0, 13],
        [-12, 2, 10],
        [-3, 1, 2],
        [-5, 2, 3],
        [-15, 2, 13],
        [-1, -1, 2],
        [-11, 2, 9],
        [-13, 2, 11],
        [-4, 2, 2],
        [-14, 3, 11],
        [-14, 1, 13],
        [-14, 7, 7],
        [-14, 0, 14],
        [-6, 3, 3],
        [0, 0, 0],
        [-15, 3, 12],
        [-6, -6, 12],
        [-11, -1, 12],
        [-13, 1, 12],
        [-12, 0, 12],
        [-14, 2, 12],
        [-15, 5, 10],
        [-6, 1, 5],
        [-12, 5, 7],
        [-4, -1, 5],
        [-5, 0, 5],
        [-14, 5, 9],
        [-5, -5, 10],
        [-10, 5, 5],
        [-15, 7, 8],
        [-5, -3, 8],
        [-11, 3, 8],
        [-4, -4, 8],
        [-10, 2, 8],
        [-13, 5, 8],
        [-7, -3, 10],
        [-7, -4, 11],
        [-7, -6, 13],
        [-7, 0, 7],
        [-7, -5, 12],
        [-7, 2, 5],
        [-7, -1, 8],
        [-7, -7, 14],
        [-5, 1, 4],
        [-3, -1, 4],
        [-15, 4, 11],
        [-11, 4, 7],
        [-13, 4, 9],
        [-4, 0, 4],
        [-6, 2, 4],
        [-14, 4, 10],
        [-12, 4, 8],
        [-7, 3, 4],
        [-8, -6, 14],
        [-8, 1, 7],
        [-8, -3, 11],
        [-8, -5, 13],
        [-8, -1, 9],
        [-8, -4, 12],
        [-8, 3, 5],
        [-8, 0, 8],
        [-5, -1, 6],
        [-15, 6, 9],
        [-13, 6, 7],
        [-6, 0, 6],
        [-11, 5, 6],
        [-14, 6, 8],
        [-7, 1, 6],
        [-10, 4, 6],
        [-8, 2, 6],
        [-12, 6, 6],
        [-3, -3, 6],
        [-8, 4, 4],
        [-12, -2, 14],
        [-5, -2, 7],
        [-2, -1, 3],
        [-11, -2, 13],
        [-2, 1, 1],
        [-2, 0, 2],
        [-10, -2, 12],
        [-3, -2, 5],
        [-6, -2, 8],
        [-7, -2, 9],
        [-8, -2, 10],
        [-4, -2, 6],
        [-2, -2, 4],
        [-9, -5, 14],
        [-9, -1, 10],
        [-9, -4, 13],
        [-9, 0, 9],
        [-9, 2, 7],
        [-9, -3, 12],
        [-9, 1, 8],
        [-9, 4, 5],
        [-9, 3, 6],
        [-9, -2, 11],
      ]),
    );
  });
});

/**
 * - 280 / 313 testcases passed
 * - 다른 풀이들을 보니, 아예 접근을 잘못함. 갯수 3천개여서 조합으로 해도 충분할 줄 알았는데, 270~280번 케이스 이후로 넘어가질 못함
 */
function threeSum_fail_timeout(nums: number[]): number[][] {
  const combinationSet = new Set<string>();
  const LEN = nums.length;
  const SPLITTER = ' ';

  const createCombination = (combination: number[] = [], id = 0) => {
    if (id > LEN) {
      return;
    }

    if (combination.length === 3) {
      const [a, b, c] = combination.map((id) => nums[id]);
      if (a + b + c === 0)
        combinationSet.add([a, b, c].sort((a, b) => a - b).join(SPLITTER));
      return;
    }

    createCombination(combination.concat([]), id + 1);
    createCombination(combination.concat([id]), id + 1);
  };

  createCombination();

  return Array.from(combinationSet.values()).map((com) =>
    com.split(SPLITTER).map(Number),
  );
}
